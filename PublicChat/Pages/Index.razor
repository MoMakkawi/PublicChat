@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

@if (user is null)
{
     <h1>Please Login First ...</h1>
}
else
{
    <div class="form-group">
        <label>
            User: @user
        </label>
    </div>
    <div class="form-group">
        <label>
            Message:
            <input @bind="messageInput" size="50" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? messageInput;
    private string? user;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        user = authstate.User.Identity?.Name?.Split('@').First();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On
    <string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", user, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}